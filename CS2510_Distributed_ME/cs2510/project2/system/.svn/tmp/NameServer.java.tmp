package cs2510.project2.system;

import java.util.ArrayList;
import java.net.InetAddress;
import cs2510.project2.local.*;
import cs2510.project2.system.Message.MessageType;

public class NameServer {
    private LookUpTable<String, Node> lookup_table;
    private LookUpTable<String, String> global_cache;	//NOTE: the global nameserver uses this as the lookup table
    private Thread t_receiver = null;
    
    protected RaymondTree<Node> tree; 
    protected ReceiverSocket receiver;
    protected SenderSocket sender;
    protected AddressLookup lookup;
    protected String address;

    // Pass instance of this class to each node that is created
    public class AddressLookup {
        //this method will handle looking up the location of dest_uid
        //1) check local nameserver
        //2) check global cache
        //3) ask global nameserver for info
        public synchronized void sendMessage(Message msg, String source_uid, String dest_uid) {
            //sender.sendMessage(msg);
        }
    }
    
    //default constructor
    public NameServer(){
        lookup_table = new LookUpTable<String, Node>("local");
        global_cache = new LookUpTable<String, String>("global");
        
        try {
            address = new String(InetAddress.getLocalHost().getHostName());
        } catch (Exception e) {}

        receiver = new ReceiverSocket();
        sender = new SenderSocket(address);
        lookup = new AddressLookup();

    }
    
    //nameservers:  initial machines to establish a connection with
    public NameServer(ArrayList<String> nameservers) {
        lookup_table = new LookUpTable<String, Node>("local");
        global_cache = new LookUpTable<String, String>("global");
        
        receiver = new ReceiverSocket();
        sender = new SenderSocket(address, nameservers);
        lookup = new AddressLookup();
    
        try {
            address = new String(InetAddress.getLocalHost().getHostName());
        } catch (Exception e) {}
    }
    
    public void start() {
        new Thread(receiver).start();
    }
    
    public void stop(){
        receiver.stop();
    }
    
    protected void addToTable(String uid, Node node) {
        synchronized (lookup_table) {
            lookup_table.put(uid, node);
        }
    }

    protected void removeFromTable(String uid) {
        synchronized (lookup_table) {
            lookup_table.remove(uid);
        }
    } 

    protected Node readTable(String uid) {
        Node node;
        synchronized (lookup_table) {
            node = lookup_table.get(uid);
        }
        return node;
    }

    protected void addToCache(String uid, String machine) {
        synchronized (global_cache) {
            global_cache.put(uid, machine);
        }
    }

    protected void removeFromCache(String uid) {
        synchronized (global_cache) {
            global_cache.remove(uid);
        }
    } 

    protected String readCache(String uid) {
        String machine;
        synchronized (global_cache) {
            machine = global_cache.get(uid);
        }
        return machine;
    } 
    
    //setters and getters (used by CLI)
    public LookUpTable<String, Node> getTable(){
        return lookup_table;
    }
    
    public LookUpTable<String, String> getCache(){
        return global_cache;
    }
}
