package cs2510.project2.global;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;

import cs2510.project2.local.Node;
import cs2510.project2.system.Message;
import cs2510.project2.system.NameServer;
import cs2510.project2.system.RaymondTree;
import cs2510.project2.system.Message.MessageType;

public class GlobalNameServer extends NameServer{
	//the global nameserver has every local nameserver as a direct child
	private static final int BRANCHES = Integer.MAX_VALUE;
    
    public GlobalNameServer(){
    	super();
	    System.out.println("Global NameServer Location: " + this.address);
	        
	    //create the tree used for raymond's token algorithm
	    tree = new RaymondTree<Node>(BRANCHES);
	        
        //start message listener and processor
	    start();
    }
    
    //starts the nameservers message listener and the message processor
    public void start(){
    	//start the message listener
    	super.start(); 
    	
        //start the message processor
        new Thread(new GlobalMessageProcessor()).start();    
    }
    
    public void stop(){
        
    }
    
    //processes messages queued in the receiver socket's inbox
    private class GlobalMessageProcessor implements Runnable{
        private ArrayList<String> local_machines;

        public GlobalMessageProcessor() {
            local_machines = new ArrayList<String>();
        }

		public void run() {
    	    Message current, msg;
    	    MessageType type;
			String data, local_uid, local_address;

			while(true){
				if(receiver != null){
					current = receiver.getMessage();
					if(current != null){
						System.out.println("Global NameServer received a message");
						System.out.println(current.toString());
						type = current.getType();
												
						//process message based on type
						switch(type){
							//new local nameserver joins system
							case SYS_NEW:	
								local_uid = current.getSourceUid();
								local_address = current.getSourceAddr();

                                //add local name server to cache
								addToCache(local_uid, local_address);
								
								//create a connection with the new machine
								sender.addConnection(local_address);
								
								//create a response message (from, to, message)
								//Message msg = new Message(address, local_address, "welcome to the system");
								msg = new Message("welcome to the system", MessageType.SYS_NEW_R);
							    
								//send a response to the new local ns
								sender.sendMessage(msg, local_address);

                                //need to inform all local name-servers of new joiner
                                for (String machine : this.local_machines) {
                                    msg = new Message(local_address, MessageType.SYS_NEW_INFORM);
                                    sender.sendMessage(msg, machine);
                                }

                                this.local_machines.add(local_address);
								break;
                            
                            //a new node (user or resource) has joined the system
                            //update the lookup table
						    case SYS_JOIN:
                                //the body contains the uid of the new node
                                data = current.getBody();
                                local_address = current.getSourceAddr();

                                addToCache(data, local_address);
                                break;
							//local nameserver is asking for the location of a resource
							case SYS_LOOKUP:
								//data is just the uid of the resource to lookup
								data = current.getBody();
								readCache(data);
							    break;
							case NO_TYPE:
							    break;
						}
					}
				}
			}
		}
    }
}
//this is a lot of closing brackets
