package cs2510.project2.global;

import java.util.LinkedList;
import java.util.Random;

import cs2510.project2.system.Message;
import cs2510.project2.system.NameServer;
import cs2510.project2.system.RaymondNode;
import cs2510.project2.system.RaymondTree;
import cs2510.project2.system.Message.MessageType;
import cs2510.project2.system.Token;

public class GlobalNameServer extends NameServer{
	//the global nameserver has every local nameserver as a direct child
	private static final int BRANCHES = Integer.MAX_VALUE;
    
    //used for raymond's token-based tree ME algorithm
    private RaymondTree tree;
    private RaymondNode root;

    //global message processor
	private GlobalMessageProcessor gmp = null;
    
    //random number generator
    Random random;


    public GlobalNameServer(){
    	super();
	    System.out.println("Global NameServer Location: " + this.address);
	    
        //seed generator
        random = new Random(System.currentTimeMillis());
            
	    //create the tree used for raymond's token algorithm
	    tree = new RaymondTree(BRANCHES);
	    
        //add the global ns to the root of the raymond tree
        root = new RaymondNode(this.address);
        tree.addNode(root); 

        //start message listener and processor
	    start();
    }
    
    //starts the nameservers message listener and the message processor
    public void start(){
    	//start the message listener
    	super.start();
	
    	//create the message processor
    	gmp = new GlobalMessageProcessor();
    	
        //start the message processor
        new Thread(gmp).start();    
    }
    
    //stop the global message processor
    //call superclass to end all connections and nodes
    public void stop(){
        super.stop();
        if(gmp != null)
            gmp.stop();
    }
    
    @Override
    public void dumpTree() {
       System.out.println(tree.toString());
    }
    
    //processes messages queued in the receiver socket's inbox
    private class GlobalMessageProcessor implements Runnable{
        private boolean processing = true;
        
        public GlobalMessageProcessor() {}
        
        public void stop(){
            processing = false;
        }
        
		public void run() {
    	    Message current, reply;
    	    MessageType type;
			String body, response, local_uid, local_address, dest_uid, dest_address, result;
            String[] parsed;
            Token token;

			while(processing){
				if(receiver != null){
					current = receiver.getMessage();
					if(current != null){
						System.out.println("Global NameServer received a message");
						System.out.println(current.toString() + '\n');

						type = current.getType();
                        local_uid = current.getSourceUid();
                        local_address = current.getSourceAddr();
                        response = current.getResponse();
                        body = current.getBody();
												
						//process message based on type
						switch(type){
							//new local nameserver joins system
							case SYS_NEW:	
								//create a connection with the new machine
								sender.addConnection(local_address);
								
								//create a response message (body, response, type)
								reply = new Message(body, "Welcome to the system", MessageType.SYS_NEW_R);
							    
								//send a response to the new local ns
								sender.sendMessage(reply, local_address);
                                
                                //notify all nameservers of new nameserver
                                LinkedList<RaymondNode> children = tree.getRoot().getChildren();
                                for(RaymondNode child : children){
                                    reply = new Message(local_address, "none", MessageType.SYS_NEW_INFORM);
                                    sender.sendMessage(reply, child.getName());
                                }

                                //add uid of new local nameserver to raymond tree
                                tree.addNode(new RaymondNode(local_address));
								break;
                            
                            //a new node (user or resource) has joined the system
						    case SYS_JOIN:
                                //the body contains the uid of the new node
                                addToCache(body, local_address);

                                //if the uid containst the substr "_R#" then the node is a resouce
                                //and a token needs to be created for it
                                //all tokens initially start at the global root
                                //when the root changes, all unused parsed have to be moved to the new root
                                if(body.indexOf("_R") >= 0)
                                   root.addToken(new Token(body));

                                break;
							//local nameserver is asking for the location of a resource
							case SYS_LOOKUP:
								//body is of the form <requesting node>#<requested node>#<original message body>#<original message type>
								parsed = body.split("#");
                                result = readCache(parsed[1]);

                                if (result == null) {
    								reply = new Message(body, "null", MessageType.SYS_LOOKUP_NULL);
                                }
                                else {
    								reply = new Message(body, result, MessageType.SYS_LOOKUP_R);
                                }

                                //send a response to the local ns
                                sender.sendMessage(reply, local_address);
							    break;
                            case SYS_ALLNODE:
                                //send ALL the nodes to a specific node
                                reply = new Message(body, getNodeUids(), MessageType.NODE_ALLNODE_R);
                                reply.setDestUid(local_uid);
                                sender.sendMessage(reply, local_address);
                                break;
                            
                            //Tree ME messages
                            case TREE_REQ:
                                //randomly pick a resource
                                token = root.getToken( random.nextInt( root.getNumTokens() ) );
                                if(token.isLocked())
                                    token.addPending(local_uid);
                                else{
                                    token.lock();
                                    reply = new Message(token.getResourceUid(), "", MessageType.TREE_ACK);
                                    reply.setDestUid(local_uid);
                                    sender.sendMessage(reply, local_address); 
                                }
                                break;
                            
                            case TREE_REL:
                                //body contains the uid of the resource that is now available
                                token = root.getToken(body);
                                 
                                //there are other usernodes waiting for this resource
                                if(token.getNumPending() > 0){
                                    local_uid = token.getPending();
                                    local_address = readCache(local_uid);
                                    reply = new Message(token.getResourceUid(), "", MessageType.TREE_ACK);
                                    reply.setDestUid(local_uid);
                                    sender.sendMessage(reply, local_address);
                                }
                                else
                                    token.unlock();
				break;
                            case SYS_ALLUSER:
                                //send ALL the user nodes to a specific node
                                msg = new Message(body, getUserNodeUids(), MessageType.NODE_ALLUSER_R);
                                msg.setDestUid(local_uid);
                                sender.sendMessage(msg, local_address);
                                break;
                            case SYS_ALLRESOURCE:
                                //send ALL the resource nodes 
                                msg = new Message(body, getResourceNodeUids(), MessageType.NODE_ALLRESOURCE_R);
                                msg.setDestUid(local_uid);
                                sender.sendMessage(msg, local_address);
                                break;
							case NO_TYPE:
							    break;
						}
					}
				}
			}
		}
    }
}
//this is a lot of closing brackts
